// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"injapi/restapi/operations/activity"
	"injapi/restapi/operations/banner"
	"injapi/restapi/operations/category"
	"injapi/restapi/operations/home"
	"injapi/restapi/operations/icon"
	"injapi/restapi/operations/member"
	"injapi/restapi/operations/praise"
	"injapi/restapi/operations/search"
	"injapi/restapi/operations/spare"
	"injapi/restapi/operations/start_up"
)

// NewJinlinonlineActivityAPI creates a new JinlinonlineActivity instance
func NewJinlinonlineActivityAPI(spec *loads.Document) *JinlinonlineActivityAPI {
	return &JinlinonlineActivityAPI{
		handlers:              make(map[string]map[string]http.Handler),
		formats:               strfmt.Default,
		defaultConsumes:       "application/json",
		defaultProduces:       "application/json",
		ServerShutdown:        func() {},
		spec:                  spec,
		ServeError:            errors.ServeError,
		BasicAuthenticator:    security.BasicAuth,
		APIKeyAuthenticator:   security.APIKeyAuth,
		BearerAuthenticator:   security.BearerAuth,
		JSONConsumer:          runtime.JSONConsumer(),
		MultipartformConsumer: runtime.DiscardConsumer,
		JSONProducer:          runtime.JSONProducer(),
		ActivityNrActivityDetailHandler: activity.NrActivityDetailHandlerFunc(func(params activity.NrActivityDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation ActivityNrActivityDetail has not yet been implemented")
		}),
		ActivityNrActivityFavHandler: activity.NrActivityFavHandlerFunc(func(params activity.NrActivityFavParams) middleware.Responder {
			return middleware.NotImplemented("operation ActivityNrActivityFav has not yet been implemented")
		}),
		ActivityNrActivityFieldListHandler: activity.NrActivityFieldListHandlerFunc(func(params activity.NrActivityFieldListParams) middleware.Responder {
			return middleware.NotImplemented("operation ActivityNrActivityFieldList has not yet been implemented")
		}),
		ActivityNrActivityJoinHandler: activity.NrActivityJoinHandlerFunc(func(params activity.NrActivityJoinParams) middleware.Responder {
			return middleware.NotImplemented("operation ActivityNrActivityJoin has not yet been implemented")
		}),
		ActivityNrActivityListHandler: activity.NrActivityListHandlerFunc(func(params activity.NrActivityListParams) middleware.Responder {
			return middleware.NotImplemented("operation ActivityNrActivityList has not yet been implemented")
		}),
		ActivityNrActivityListFavHandler: activity.NrActivityListFavHandlerFunc(func(params activity.NrActivityListFavParams) middleware.Responder {
			return middleware.NotImplemented("operation ActivityNrActivityListFav has not yet been implemented")
		}),
		ActivityNrActivityListJoinedHandler: activity.NrActivityListJoinedHandlerFunc(func(params activity.NrActivityListJoinedParams) middleware.Responder {
			return middleware.NotImplemented("operation ActivityNrActivityListJoined has not yet been implemented")
		}),
		ActivityNrActivityListSponsorHandler: activity.NrActivityListSponsorHandlerFunc(func(params activity.NrActivityListSponsorParams) middleware.Responder {
			return middleware.NotImplemented("operation ActivityNrActivityListSponsor has not yet been implemented")
		}),
		ActivityNrActivitySponsorsListHandler: activity.NrActivitySponsorsListHandlerFunc(func(params activity.NrActivitySponsorsListParams) middleware.Responder {
			return middleware.NotImplemented("operation ActivityNrActivitySponsorsList has not yet been implemented")
		}),
		BannerNrBannerDetailHandler: banner.NrBannerDetailHandlerFunc(func(params banner.NrBannerDetailParams) middleware.Responder {
			return middleware.NotImplemented("operation BannerNrBannerDetail has not yet been implemented")
		}),
		BannerNrBannerListHandler: banner.NrBannerListHandlerFunc(func(params banner.NrBannerListParams) middleware.Responder {
			return middleware.NotImplemented("operation BannerNrBannerList has not yet been implemented")
		}),
		CategoryNrCategoryListHandler: category.NrCategoryListHandlerFunc(func(params category.NrCategoryListParams) middleware.Responder {
			return middleware.NotImplemented("operation CategoryNrCategoryList has not yet been implemented")
		}),
		CategoryNrCategorySubListHandler: category.NrCategorySubListHandlerFunc(func(params category.NrCategorySubListParams) middleware.Responder {
			return middleware.NotImplemented("operation CategoryNrCategorySubList has not yet been implemented")
		}),
		HomeNrHomeHandler: home.NrHomeHandlerFunc(func(params home.NrHomeParams) middleware.Responder {
			return middleware.NotImplemented("operation HomeNrHome has not yet been implemented")
		}),
		IconNrIconListHandler: icon.NrIconListHandlerFunc(func(params icon.NrIconListParams) middleware.Responder {
			return middleware.NotImplemented("operation IconNrIconList has not yet been implemented")
		}),
		MemberNrMemberCheckRechargeHandler: member.NrMemberCheckRechargeHandlerFunc(func(params member.NrMemberCheckRechargeParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberNrMemberCheckRecharge has not yet been implemented")
		}),
		MemberNrMemberRegisterSendSmsHandler: member.NrMemberRegisterSendSmsHandlerFunc(func(params member.NrMemberRegisterSendSmsParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberNrMemberRegisterSendSms has not yet been implemented")
		}),
		MemberNrOrderSerialNuberHandler: member.NrOrderSerialNuberHandlerFunc(func(params member.NrOrderSerialNuberParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberNrOrderSerialNuber has not yet been implemented")
		}),
		PraiseNrPraiseClickHandler: praise.NrPraiseClickHandlerFunc(func(params praise.NrPraiseClickParams) middleware.Responder {
			return middleware.NotImplemented("operation PraiseNrPraiseClick has not yet been implemented")
		}),
		PraiseNrPraiseListHandler: praise.NrPraiseListHandlerFunc(func(params praise.NrPraiseListParams) middleware.Responder {
			return middleware.NotImplemented("operation PraiseNrPraiseList has not yet been implemented")
		}),
		SearchNrSearchHandler: search.NrSearchHandlerFunc(func(params search.NrSearchParams) middleware.Responder {
			return middleware.NotImplemented("operation SearchNrSearch has not yet been implemented")
		}),
		SpareNrSpareClickHandler: spare.NrSpareClickHandlerFunc(func(params spare.NrSpareClickParams) middleware.Responder {
			return middleware.NotImplemented("operation SpareNrSpareClick has not yet been implemented")
		}),
		SpareNrSpareListHandler: spare.NrSpareListHandlerFunc(func(params spare.NrSpareListParams) middleware.Responder {
			return middleware.NotImplemented("operation SpareNrSpareList has not yet been implemented")
		}),
		StartUpNrStartUpHandler: start_up.NrStartUpHandlerFunc(func(params start_up.NrStartUpParams) middleware.Responder {
			return middleware.NotImplemented("operation StartUpNrStartUp has not yet been implemented")
		}),
		MemberFindPassEditPassHandler: member.FindPassEditPassHandlerFunc(func(params member.FindPassEditPassParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberFindPassEditPass has not yet been implemented")
		}),
		MemberFindPassSendSmsHandler: member.FindPassSendSmsHandlerFunc(func(params member.FindPassSendSmsParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberFindPassSendSms has not yet been implemented")
		}),
		MemberLoginHandler: member.LoginHandlerFunc(func(params member.LoginParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberLogin has not yet been implemented")
		}),
		MemberOrderListHandler: member.OrderListHandlerFunc(func(params member.OrderListParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberOrderList has not yet been implemented")
		}),
		MemberRegisterHandler: member.RegisterHandlerFunc(func(params member.RegisterParams) middleware.Responder {
			return middleware.NotImplemented("operation MemberRegister has not yet been implemented")
		}),
	}
}

/*JinlinonlineActivityAPI jinlinonline-activity(活动) */
type JinlinonlineActivityAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for a "multipart/form-data" mime type
	MultipartformConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// ActivityNrActivityDetailHandler sets the operation handler for the activity detail operation
	ActivityNrActivityDetailHandler activity.NrActivityDetailHandler
	// ActivityNrActivityFavHandler sets the operation handler for the activity fav operation
	ActivityNrActivityFavHandler activity.NrActivityFavHandler
	// ActivityNrActivityFieldListHandler sets the operation handler for the activity field list operation
	ActivityNrActivityFieldListHandler activity.NrActivityFieldListHandler
	// ActivityNrActivityJoinHandler sets the operation handler for the activity join operation
	ActivityNrActivityJoinHandler activity.NrActivityJoinHandler
	// ActivityNrActivityListHandler sets the operation handler for the activity list operation
	ActivityNrActivityListHandler activity.NrActivityListHandler
	// ActivityNrActivityListFavHandler sets the operation handler for the activity list fav operation
	ActivityNrActivityListFavHandler activity.NrActivityListFavHandler
	// ActivityNrActivityListJoinedHandler sets the operation handler for the activity list joined operation
	ActivityNrActivityListJoinedHandler activity.NrActivityListJoinedHandler
	// ActivityNrActivityListSponsorHandler sets the operation handler for the activity list sponsor operation
	ActivityNrActivityListSponsorHandler activity.NrActivityListSponsorHandler
	// ActivityNrActivitySponsorsListHandler sets the operation handler for the activity sponsors list operation
	ActivityNrActivitySponsorsListHandler activity.NrActivitySponsorsListHandler
	// BannerNrBannerDetailHandler sets the operation handler for the banner detail operation
	BannerNrBannerDetailHandler banner.NrBannerDetailHandler
	// BannerNrBannerListHandler sets the operation handler for the banner list operation
	BannerNrBannerListHandler banner.NrBannerListHandler
	// CategoryNrCategoryListHandler sets the operation handler for the category list operation
	CategoryNrCategoryListHandler category.NrCategoryListHandler
	// CategoryNrCategorySubListHandler sets the operation handler for the category sub list operation
	CategoryNrCategorySubListHandler category.NrCategorySubListHandler
	// HomeNrHomeHandler sets the operation handler for the home operation
	HomeNrHomeHandler home.NrHomeHandler
	// IconNrIconListHandler sets the operation handler for the icon list operation
	IconNrIconListHandler icon.NrIconListHandler
	// MemberNrMemberCheckRechargeHandler sets the operation handler for the member check recharge operation
	MemberNrMemberCheckRechargeHandler member.NrMemberCheckRechargeHandler
	// MemberNrMemberRegisterSendSmsHandler sets the operation handler for the member register send sms operation
	MemberNrMemberRegisterSendSmsHandler member.NrMemberRegisterSendSmsHandler
	// MemberNrOrderSerialNuberHandler sets the operation handler for the order serial nuber operation
	MemberNrOrderSerialNuberHandler member.NrOrderSerialNuberHandler
	// PraiseNrPraiseClickHandler sets the operation handler for the praise click operation
	PraiseNrPraiseClickHandler praise.NrPraiseClickHandler
	// PraiseNrPraiseListHandler sets the operation handler for the praise list operation
	PraiseNrPraiseListHandler praise.NrPraiseListHandler
	// SearchNrSearchHandler sets the operation handler for the search operation
	SearchNrSearchHandler search.NrSearchHandler
	// SpareNrSpareClickHandler sets the operation handler for the spare click operation
	SpareNrSpareClickHandler spare.NrSpareClickHandler
	// SpareNrSpareListHandler sets the operation handler for the spare list operation
	SpareNrSpareListHandler spare.NrSpareListHandler
	// StartUpNrStartUpHandler sets the operation handler for the start up operation
	StartUpNrStartUpHandler start_up.NrStartUpHandler
	// MemberFindPassEditPassHandler sets the operation handler for the find pass edit pass operation
	MemberFindPassEditPassHandler member.FindPassEditPassHandler
	// MemberFindPassSendSmsHandler sets the operation handler for the find pass send sms operation
	MemberFindPassSendSmsHandler member.FindPassSendSmsHandler
	// MemberLoginHandler sets the operation handler for the login operation
	MemberLoginHandler member.LoginHandler
	// MemberOrderListHandler sets the operation handler for the order list operation
	MemberOrderListHandler member.OrderListHandler
	// MemberRegisterHandler sets the operation handler for the register operation
	MemberRegisterHandler member.RegisterHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *JinlinonlineActivityAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *JinlinonlineActivityAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *JinlinonlineActivityAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *JinlinonlineActivityAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *JinlinonlineActivityAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *JinlinonlineActivityAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *JinlinonlineActivityAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the JinlinonlineActivityAPI
func (o *JinlinonlineActivityAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.ActivityNrActivityDetailHandler == nil {
		unregistered = append(unregistered, "activity.NrActivityDetailHandler")
	}

	if o.ActivityNrActivityFavHandler == nil {
		unregistered = append(unregistered, "activity.NrActivityFavHandler")
	}

	if o.ActivityNrActivityFieldListHandler == nil {
		unregistered = append(unregistered, "activity.NrActivityFieldListHandler")
	}

	if o.ActivityNrActivityJoinHandler == nil {
		unregistered = append(unregistered, "activity.NrActivityJoinHandler")
	}

	if o.ActivityNrActivityListHandler == nil {
		unregistered = append(unregistered, "activity.NrActivityListHandler")
	}

	if o.ActivityNrActivityListFavHandler == nil {
		unregistered = append(unregistered, "activity.NrActivityListFavHandler")
	}

	if o.ActivityNrActivityListJoinedHandler == nil {
		unregistered = append(unregistered, "activity.NrActivityListJoinedHandler")
	}

	if o.ActivityNrActivityListSponsorHandler == nil {
		unregistered = append(unregistered, "activity.NrActivityListSponsorHandler")
	}

	if o.ActivityNrActivitySponsorsListHandler == nil {
		unregistered = append(unregistered, "activity.NrActivitySponsorsListHandler")
	}

	if o.BannerNrBannerDetailHandler == nil {
		unregistered = append(unregistered, "banner.NrBannerDetailHandler")
	}

	if o.BannerNrBannerListHandler == nil {
		unregistered = append(unregistered, "banner.NrBannerListHandler")
	}

	if o.CategoryNrCategoryListHandler == nil {
		unregistered = append(unregistered, "category.NrCategoryListHandler")
	}

	if o.CategoryNrCategorySubListHandler == nil {
		unregistered = append(unregistered, "category.NrCategorySubListHandler")
	}

	if o.HomeNrHomeHandler == nil {
		unregistered = append(unregistered, "home.NrHomeHandler")
	}

	if o.IconNrIconListHandler == nil {
		unregistered = append(unregistered, "icon.NrIconListHandler")
	}

	if o.MemberNrMemberCheckRechargeHandler == nil {
		unregistered = append(unregistered, "member.NrMemberCheckRechargeHandler")
	}

	if o.MemberNrMemberRegisterSendSmsHandler == nil {
		unregistered = append(unregistered, "member.NrMemberRegisterSendSmsHandler")
	}

	if o.MemberNrOrderSerialNuberHandler == nil {
		unregistered = append(unregistered, "member.NrOrderSerialNuberHandler")
	}

	if o.PraiseNrPraiseClickHandler == nil {
		unregistered = append(unregistered, "praise.NrPraiseClickHandler")
	}

	if o.PraiseNrPraiseListHandler == nil {
		unregistered = append(unregistered, "praise.NrPraiseListHandler")
	}

	if o.SearchNrSearchHandler == nil {
		unregistered = append(unregistered, "search.NrSearchHandler")
	}

	if o.SpareNrSpareClickHandler == nil {
		unregistered = append(unregistered, "spare.NrSpareClickHandler")
	}

	if o.SpareNrSpareListHandler == nil {
		unregistered = append(unregistered, "spare.NrSpareListHandler")
	}

	if o.StartUpNrStartUpHandler == nil {
		unregistered = append(unregistered, "start_up.NrStartUpHandler")
	}

	if o.MemberFindPassEditPassHandler == nil {
		unregistered = append(unregistered, "member.FindPassEditPassHandler")
	}

	if o.MemberFindPassSendSmsHandler == nil {
		unregistered = append(unregistered, "member.FindPassSendSmsHandler")
	}

	if o.MemberLoginHandler == nil {
		unregistered = append(unregistered, "member.LoginHandler")
	}

	if o.MemberOrderListHandler == nil {
		unregistered = append(unregistered, "member.OrderListHandler")
	}

	if o.MemberRegisterHandler == nil {
		unregistered = append(unregistered, "member.RegisterHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *JinlinonlineActivityAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *JinlinonlineActivityAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *JinlinonlineActivityAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *JinlinonlineActivityAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *JinlinonlineActivityAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *JinlinonlineActivityAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the jinlinonline activity API
func (o *JinlinonlineActivityAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *JinlinonlineActivityAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/activity/detail"] = activity.NewNrActivityDetail(o.context, o.ActivityNrActivityDetailHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/activity/fav"] = activity.NewNrActivityFav(o.context, o.ActivityNrActivityFavHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/activity/field/list"] = activity.NewNrActivityFieldList(o.context, o.ActivityNrActivityFieldListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/activity/join"] = activity.NewNrActivityJoin(o.context, o.ActivityNrActivityJoinHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/activity/list"] = activity.NewNrActivityList(o.context, o.ActivityNrActivityListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/activity/list/fav"] = activity.NewNrActivityListFav(o.context, o.ActivityNrActivityListFavHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/activity/list/joined"] = activity.NewNrActivityListJoined(o.context, o.ActivityNrActivityListJoinedHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/activity/list/sponsor"] = activity.NewNrActivityListSponsor(o.context, o.ActivityNrActivityListSponsorHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/activity/sponsors/list"] = activity.NewNrActivitySponsorsList(o.context, o.ActivityNrActivitySponsorsListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/banner/detail"] = banner.NewNrBannerDetail(o.context, o.BannerNrBannerDetailHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/banner/list"] = banner.NewNrBannerList(o.context, o.BannerNrBannerListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/category/list"] = category.NewNrCategoryList(o.context, o.CategoryNrCategoryListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/category/sub/list"] = category.NewNrCategorySubList(o.context, o.CategoryNrCategorySubListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/home"] = home.NewNrHome(o.context, o.HomeNrHomeHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/icon/list"] = icon.NewNrIconList(o.context, o.IconNrIconListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/member/checkRecharge"] = member.NewNrMemberCheckRecharge(o.context, o.MemberNrMemberCheckRechargeHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/member/register/sendSms"] = member.NewNrMemberRegisterSendSms(o.context, o.MemberNrMemberRegisterSendSmsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/member/order/serialNuber"] = member.NewNrOrderSerialNuber(o.context, o.MemberNrOrderSerialNuberHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/praise/click"] = praise.NewNrPraiseClick(o.context, o.PraiseNrPraiseClickHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/praise/list"] = praise.NewNrPraiseList(o.context, o.PraiseNrPraiseListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/search"] = search.NewNrSearch(o.context, o.SearchNrSearchHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/spare/click"] = spare.NewNrSpareClick(o.context, o.SpareNrSpareClickHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/spare/list"] = spare.NewNrSpareList(o.context, o.SpareNrSpareListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/startUp"] = start_up.NewNrStartUp(o.context, o.StartUpNrStartUpHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/member/findPass/editPass"] = member.NewFindPassEditPass(o.context, o.MemberFindPassEditPassHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/member/findPass/sendSms"] = member.NewFindPassSendSms(o.context, o.MemberFindPassSendSmsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/member/login"] = member.NewLogin(o.context, o.MemberLoginHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/member/order/list"] = member.NewOrderList(o.context, o.MemberOrderListHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/member/register"] = member.NewRegister(o.context, o.MemberRegisterHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *JinlinonlineActivityAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *JinlinonlineActivityAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}
