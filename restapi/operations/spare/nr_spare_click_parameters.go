// Code generated by go-swagger; DO NOT EDIT.

package spare

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewNrSpareClickParams creates a new NrSpareClickParams object
// with the default values initialized.
func NewNrSpareClickParams() NrSpareClickParams {
	var ()
	return NrSpareClickParams{}
}

// NrSpareClickParams contains all the bound params for the spare click operation
// typically these are obtained from a http.Request
//
// swagger:parameters /spare/click
type NrSpareClickParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*活动id
	  In: query
	*/
	ActivityID *int64
	/*会员id
	  In: query
	*/
	MemberID *int64
	/*被打赏会员id
	  In: query
	*/
	TargetMemberID *int64
	/*打赏金额
	  In: query
	*/
	Value *float64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *NrSpareClickParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qActivityID, qhkActivityID, _ := qs.GetOK("activityId")
	if err := o.bindActivityID(qActivityID, qhkActivityID, route.Formats); err != nil {
		res = append(res, err)
	}

	qMemberID, qhkMemberID, _ := qs.GetOK("memberId")
	if err := o.bindMemberID(qMemberID, qhkMemberID, route.Formats); err != nil {
		res = append(res, err)
	}

	qTargetMemberID, qhkTargetMemberID, _ := qs.GetOK("targetMemberId")
	if err := o.bindTargetMemberID(qTargetMemberID, qhkTargetMemberID, route.Formats); err != nil {
		res = append(res, err)
	}

	qValue, qhkValue, _ := qs.GetOK("value")
	if err := o.bindValue(qValue, qhkValue, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NrSpareClickParams) bindActivityID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("activityId", "query", "int64", raw)
	}
	o.ActivityID = &value

	return nil
}

func (o *NrSpareClickParams) bindMemberID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("memberId", "query", "int64", raw)
	}
	o.MemberID = &value

	return nil
}

func (o *NrSpareClickParams) bindTargetMemberID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("targetMemberId", "query", "int64", raw)
	}
	o.TargetMemberID = &value

	return nil
}

func (o *NrSpareClickParams) bindValue(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("value", "query", "float64", raw)
	}
	o.Value = &value

	return nil
}
